{"version":3,"sources":["axiosInstance.ts","entity/HealthCodeType.ts","reducer/login/loginReducer.ts","reducer/login/actionCreate.ts","page/login/LoginPage.tsx","page/admin/InsertStudentModal.tsx","page/admin/StudentManagetPage.tsx","page/admin/InsertTeacherModal.tsx","page/admin/TeacherManagerPage.tsx","page/admin/CollegeManagerPage.tsx","page/admin/ClassManagerPage.tsx","page/admin/MajorManagerPage.tsx","page/admin/AdminPage.tsx","component/Header.tsx","component/SubmitDailyCardForm.tsx","page/student/StudentPage.tsx","page/teacher/TeacherPage.tsx","App.tsx","reportWebVitals.ts","store.ts","serviceWorker.ts","index.tsx"],"names":["instance","axios","create","headers","interceptors","request","use","config","data","qs","stringify","response","error","ex","message","warn","Promise","reject","HealthCodeType","SetLoginStatus","loginReducer","state","action","type","setUser","user","dispatch","LoginPage","loginUser","useSelector","login","useDispatch","useEffect","get","then","to","onFinish","value","a","username","password","post","style","marginLeft","marginRight","marginTop","Item","name","rules","required","Group","prefix","UserOutlined","className","autoComplete","placeholder","LockOutlined","htmlType","InsertStudentModal","visible","setVisible","useState","options","setOptions","classId","setClassId","studentId","setStudentId","setName","idCard","setIdCard","onSubmit","id","resp","map","college","label","isLeaf","loadData","selectedOptions","console","log","targetOption","length","loading","params","collegeId","children","major","majorId","title","onCancel","onOk","changeOnSelect","onChange","width","e","target","StudentManagerPage","modalVisible","setModalVisible","setData","useParams","columns","dataIndex","key","render","GREEN","RED","YELLOW","onBack","window","history","back","ghost","extra","onClick","totalStudentCount","greenCodeStudentCount","yellowCodeStudentCount","redCodeStudentCount","dataSource","dailyCardList","Option","Select","InsertTeacherModal","collegeList","setCollegeList","setCollegeId","teacherId","setTeacherId","TeacherManagerPage","totalTeacherCount","greenCodeTeacherCount","yellowCodeTeacherCount","redCodeTeacherCount","CollegeManagerPage","ClassManagerPage","MajorManagerPage","Content","Layout","Sider","AdminPage","useHistory","logout","minHeight","collapsible","theme","defaultSelectedKeys","mode","icon","TeamOutlined","push","GoldOutlined","LogoutOutlined","padding","path","exact","component","Header","root","SubmitDailyCardForm","values","haveBeenToKeyEpidemicAreas","haveBeenAbroad","isTheExposed","isSuspectedCase","currentSymptoms","span","StudentPage","isSubmitDailyCard","setSubmitDailyCard","isLoading","setLoading","finally","active","src","alt","TeacherPage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f8336ca8.chunk.js","sourcesContent":["import axios, {AxiosError} from 'axios'\r\nimport {message} from \"antd\";\r\nimport qs from 'qs';\r\n\r\nconst instance = axios.create({\r\n    headers: {'Content-Type': 'application/x-www-form-urlencoded'}\r\n})\r\n\r\ninstance.interceptors.request.use(\r\n    config => {\r\n        // 转为formdata数据格式\r\n        config.data = qs.stringify(config.data)\r\n        return config\r\n    }\r\n)\r\ninstance.interceptors.response.use(config => config, error => {\r\n        const ex: AxiosError = error;\r\n        if (ex.response != null) {\r\n            message.warn(ex.response.data.message)\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n)\r\n;\r\n\r\nexport default instance;","export enum HealthCodeType {\r\n    GREEN = \"GREEN\",\r\n    YELLOW = \"YELLOW\",\r\n    RED = \"RED\"\r\n}","import {Action} from \"redux\";\r\nimport {LoginUser} from \"../../entity/LoginUser\";\r\n\r\nexport const SetLoginStatus = \"set_login_status\"\r\n\r\ninterface LoginAction extends Action {\r\n    data: LoginUser | null\r\n}\r\n\r\nconst loginReducer = (state: LoginUser | null = null, action: LoginAction) => {\r\n    switch (action.type) {\r\n        case SetLoginStatus:\r\n            state = action.data\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport default loginReducer","import {ThunkAction} from \"redux-thunk\";\r\nimport {Action, Dispatch} from \"redux\";\r\nimport {RootState} from \"../../store\";\r\nimport {SetLoginStatus} from \"./loginReducer\";\r\nimport {LoginUser} from \"../../entity/LoginUser\";\r\n\r\nexport const setUser = (user: LoginUser | null = null): ThunkAction<void, RootState, unknown, Action> => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch({\r\n            type: SetLoginStatus,\r\n            data: user\r\n        })\r\n    }\r\n}","import {Button, Form, Input, Radio} from \"antd\";\r\nimport React, {useEffect} from \"react\";\r\nimport {LockOutlined, UserOutlined} from \"@ant-design/icons\";\r\nimport instance from \"../../axiosInstance\";\r\nimport {LoginUser} from \"../../entity/LoginUser\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setUser} from \"../../reducer/login/actionCreate\";\r\nimport {RootState} from \"../../store\";\r\nimport {Redirect} from \"react-router\";\r\n\r\nconst LoginPage = () => {\r\n    const loginUser = useSelector((state: RootState) => state.login)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        instance\r\n            .get<LoginUser>(\"/checkLoginStatus\")\r\n            .then(response => dispatch(setUser(response.data)))\r\n    }, [dispatch])\r\n\r\n    if (loginUser != null && loginUser.login) {\r\n        switch (loginUser.type) {\r\n            case \"teacher\":\r\n                return <Redirect to=\"/teacher\"/>\r\n            case \"student\":\r\n                return <Redirect to=\"/student\"/>\r\n            default:\r\n                return <Redirect to=\"/admin\"/>\r\n        }\r\n\r\n    }\r\n\r\n    const onFinish = async (value: any) => {\r\n        try {\r\n            const username = value.username;\r\n            const password = value.password;\r\n            const type = value.type;\r\n            const response = await instance.post<LoginUser>('/login', {type, username, password})\r\n            dispatch(setUser(response.data))\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                style={{marginLeft: \"30%\", marginRight: \"30%\", marginTop: 30}}\r\n                onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"type\"\r\n                    rules={[{required: true, message: '请选择用户类型'}]}>\r\n                    <Radio.Group>\r\n                        <Radio value={\"student\"}>学生</Radio>\r\n                        <Radio value={\"teacher\"}>教师</Radio>\r\n                        <Radio value={\"admin\"}>管理员</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"username\"\r\n                    rules={[{required: true, message: '请填写用户名'}]}>\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                           autoComplete={\"username\"}\r\n                           placeholder={\"用户名\"}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[{required: true, message: '请填写密码'}]}>\r\n                    <Input prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                           placeholder={\"密码\"}\r\n                           autoComplete={\"current-password\"}\r\n                           type=\"password\"/>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">登录</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage","import {Cascader, Input, Modal} from \"antd\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {CascaderOptionType} from \"antd/lib/cascader\";\r\nimport instance from \"../../axiosInstance\";\r\nimport {Major} from \"../../entity/Major\";\r\nimport {College} from \"../../entity/College\";\r\n\r\ninterface ModalProps {\r\n    visible: boolean,\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\ninterface Option extends CascaderOptionType {\r\n    type?: \"college\" | \"major\" | \"class\"\r\n}\r\n\r\nconst InsertStudentModal: React.FC<ModalProps> = ({visible, setVisible}) => {\r\n    const [options, setOptions] = useState<Array<Option>>([]);\r\n    const [classId, setClassId] = useState<number | null>(null)\r\n    const [studentId, setStudentId] = useState<string>('')\r\n    const [name, setName] = useState<string>('')\r\n    const [idCard, setIdCard] = useState<string>('')\r\n\r\n    const onSubmit = async () => {\r\n        await instance.post(\"/admin/insertStudent\", {id: studentId, name: name, classId: classId, idCard: idCard})\r\n        setVisible(false)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        instance.get<College[]>(\"/admin/getAllCollege\")\r\n            .then((resp) => setOptions(resp.data.map((college) => {\r\n                return {\r\n                    value: college.id,\r\n                    label: college.name,\r\n                    isLeaf: false,\r\n                    type: \"college\"\r\n                }\r\n            })))\r\n    }, [])\r\n\r\n    const loadData = async (selectedOptions?: Option[]) => {\r\n        if (!selectedOptions) {\r\n            return\r\n        }\r\n        console.log(selectedOptions)\r\n        const targetOption = selectedOptions[selectedOptions.length - 1];\r\n        targetOption.loading = true;\r\n\r\n        try {\r\n            targetOption.id = targetOption.value\r\n            switch (targetOption.type) {\r\n                case \"college\": {\r\n                    const response = await instance.get<Major[]>(\"/admin/getMajorByCollegeId\",\r\n                        {\r\n                            params: {collegeId: targetOption.value}\r\n                        });\r\n                    targetOption.children = response.data.map(major => {\r\n                        return {\r\n                            value: major.id,\r\n                            label: major.name,\r\n                            isLeaf: false,\r\n                            type: \"major\"\r\n                        }\r\n                    })\r\n                }\r\n                    break\r\n                case \"major\": {\r\n                    const response = await instance.get<Major[]>(\"/admin/getAllClazzByMajor\",\r\n                        {\r\n                            params: {majorId: targetOption.value}\r\n                        });\r\n                    targetOption.children = response.data.map(major => {\r\n                        return {\r\n                            value: major.id,\r\n                            label: major.name,\r\n                            isLeaf: true,\r\n                            type: \"class\"\r\n                        }\r\n                    })\r\n                }\r\n                    break\r\n            }\r\n            setOptions([...options]);\r\n        } catch (e) {\r\n\r\n        } finally {\r\n            targetOption.loading = false;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            title=\"添加新学生\"\r\n            onCancel={() => setVisible(false)}\r\n            visible={visible}\r\n            onOk={onSubmit}>\r\n            <Cascader options={options}\r\n                      loadData={loadData}\r\n                      changeOnSelect\r\n                      placeholder={\"请选择班级\"}\r\n                      onChange={(value, selectedOptions) => {\r\n                          if (value.length === 3 && selectedOptions != null) {\r\n                              setClassId(selectedOptions[2].value as number)\r\n                          } else {\r\n                              setClassId(null)\r\n                          }\r\n                      }}\r\n                      style={{width: '100%'}}/>\r\n            <Input placeholder={\"学号\"}\r\n                   onChange={(e) => setStudentId(e.target.value)}\r\n                   value={studentId}/>\r\n            <Input placeholder={\"姓名\"}\r\n                   onChange={(e) => setName(e.target.value)}\r\n                   value={name}/>\r\n            <Input placeholder={\"身份证号\"}\r\n                   onChange={(e) => setIdCard(e.target.value)}\r\n                   value={idCard}/>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default InsertStudentModal","import React, {useEffect, useState} from \"react\";\r\nimport {Button, Descriptions, PageHeader, Table} from \"antd\";\r\nimport instance from \"../../axiosInstance\";\r\nimport {StudentDailyCardStatistic} from \"../../entity/StudentDailyCardStatistic\";\r\nimport {HealthCodeType} from \"../../entity/HealthCodeType\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport InsertStudentModal from \"./InsertStudentModal\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../store\";\r\n\r\nconst StudentManagerPage = () => {\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [data, setData] = useState<StudentDailyCardStatistic>()\r\n    const {collegeId, majorId, classId} = useParams<{ collegeId: string, majorId: string, classId: string }>()\r\n    const loginUser = useSelector((state: RootState) => state.login)!!\r\n\r\n    const columns = [\r\n        {title: '学号', dataIndex: 'studentId', key: 'studentId'},\r\n        {title: '姓名', dataIndex: 'name', key: 'name'},\r\n        {title: '学院', dataIndex: 'className', key: 'className'},\r\n        {title: '专业', dataIndex: 'majorName', key: 'majorName'},\r\n        {title: '班级', dataIndex: 'collegeName', key: 'collegeName'},\r\n        {\r\n            title: '健康码', dataIndex: 'type', key: 'type',\r\n            render: (type: HealthCodeType) => {\r\n                switch (type) {\r\n                    case HealthCodeType.GREEN:\r\n                        return \"绿码\"\r\n                    case HealthCodeType.RED:\r\n                        return \"红码\"\r\n                    case HealthCodeType.YELLOW:\r\n                        return \"黄码\"\r\n                }\r\n            }\r\n        }];\r\n    useEffect(() => {\r\n        instance.get<StudentDailyCardStatistic>(\"/admin/getStudentStatistic\", {\r\n            params: {\r\n                collegeId, majorId, classId\r\n            }\r\n        }).then(response => setData(response.data))\r\n    }, [collegeId, majorId, classId])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <PageHeader\r\n                onBack={() => window.history.back()}\r\n                ghost={false}\r\n                title=\"学生管理\"\r\n                extra={\r\n                    loginUser.type === \"systemAdmin\" &&\r\n                    <Button onClick={() => setModalVisible(true)} type={\"primary\"}>添加新学生</Button>\r\n                }>\r\n                <Descriptions>\r\n                    <Descriptions.Item label=\"学生总数\">{data?.totalStudentCount}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"绿码学生数量\">{data?.greenCodeStudentCount}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"黄码学生数量\">{data?.yellowCodeStudentCount}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"红码学生数量\">{data?.redCodeStudentCount}</Descriptions.Item>\r\n                </Descriptions>\r\n            </PageHeader>\r\n\r\n            <InsertStudentModal visible={modalVisible} setVisible={setModalVisible}/>\r\n            <Table columns={columns} dataSource={data?.dailyCardList}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StudentManagerPage;","import React, {useEffect, useState} from \"react\";\r\nimport {Input, Modal, Select} from \"antd\";\r\nimport instance from \"../../axiosInstance\";\r\nimport {College} from \"../../entity/College\";\r\n\r\nconst {Option} = Select;\r\n\r\ninterface ModalProps {\r\n    visible: boolean,\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\n\r\nconst InsertTeacherModal: React.FC<ModalProps> = ({visible, setVisible}) => {\r\n    const [collegeList, setCollegeList] = useState<College[]>([])\r\n    const [collegeId, setCollegeId] = useState<number | null>(null)\r\n\r\n    const [teacherId, setTeacherId] = useState<string>()\r\n    const [name, setName] = useState<string>()\r\n    const [idCard, setIdCard] = useState<string>()\r\n\r\n    useEffect(() => {\r\n        instance.get<College[]>(\"/admin/getAllCollege\")\r\n            .then(response => setCollegeList(response.data))\r\n    })\r\n\r\n    const onSubmit = async () => {\r\n        await instance.post(\"/admin/insertTeacher\", {\r\n            teacherId: teacherId,\r\n            name: name,\r\n            collegeId: collegeId,\r\n            idCard: idCard\r\n        })\r\n        setVisible(false)\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title=\"添加新教师\"\r\n            onCancel={() => setVisible(false)}\r\n            visible={visible}\r\n            onOk={onSubmit}>\r\n            <Select placeholder={\"学院\"} style={{width: \"100%\"}} onChange={(value) => setCollegeId(value as number)}>\r\n                {\r\n                    collegeList.map(college => <Option value={college.id}>{college.name}</Option>)\r\n                }\r\n            </Select>\r\n            <Input placeholder={\"工号\"}\r\n                   onChange={(e) => setTeacherId(e.target.value)}\r\n                   value={teacherId}/>\r\n            <Input placeholder={\"姓名\"}\r\n                   onChange={(e) => setName(e.target.value)}\r\n                   value={name}/>\r\n            <Input placeholder={\"身份证号\"}\r\n                   onChange={(e) => setIdCard(e.target.value)}\r\n                   value={idCard}/>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default InsertTeacherModal","import React, {useEffect, useState} from \"react\";\r\nimport {Button, Descriptions, PageHeader, Table} from \"antd\";\r\nimport {HealthCodeType} from \"../../entity/HealthCodeType\";\r\nimport instance from \"../../axiosInstance\";\r\nimport {TeacherDailyCardStatistic} from \"../../entity/TeacherDailyCardStatistic\";\r\nimport InsertTeacherModal from \"./InsertTeacherModal\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../store\";\r\n\r\nconst TeacherManagerPage = () => {\r\n    const [visible, setVisible] = useState(false)\r\n    const loginUser = useSelector((state: RootState) => state.login)!!\r\n\r\n    const [data, setData] = useState<TeacherDailyCardStatistic>()\r\n    const columns = [\r\n        {title: '工号', dataIndex: 'teacherId', key: 'teacherId'},\r\n        {title: '姓名', dataIndex: 'name', key: 'name'},\r\n        {title: '学院', dataIndex: 'className', key: 'className'},\r\n        {\r\n            title: '健康码', dataIndex: 'type', key: 'type',\r\n            render: (type: HealthCodeType) => {\r\n                switch (type) {\r\n                    case HealthCodeType.GREEN:\r\n                        return \"绿码\"\r\n                    case HealthCodeType.RED:\r\n                        return \"红码\"\r\n                    case HealthCodeType.YELLOW:\r\n                        return \"黄码\"\r\n                }\r\n            }\r\n        }];\r\n\r\n    useEffect(() => {\r\n        instance.get<TeacherDailyCardStatistic>(\"/admin/getTeacherStatistic\")\r\n            .then(response => setData(response.data))\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <PageHeader\r\n                onBack={() => window.history.back()}\r\n                ghost={false}\r\n                title=\"教师管理\"\r\n                extra={\r\n                    loginUser.type === \"systemAdmin\" &&\r\n                    <Button onClick={() => setVisible(true)} type={\"primary\"}>添加新教师</Button>\r\n                }>\r\n                <Descriptions>\r\n                    <Descriptions.Item label=\"教师总数\">{data?.totalTeacherCount}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"绿码教师数量\">{data?.greenCodeTeacherCount}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"黄码教师数量\">{data?.yellowCodeTeacherCount}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"红码教师数量\">{data?.redCodeTeacherCount}</Descriptions.Item>\r\n                </Descriptions>\r\n            </PageHeader>\r\n            <InsertTeacherModal visible={visible} setVisible={setVisible}/>\r\n            <Table columns={columns} dataSource={data?.dailyCardList}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TeacherManagerPage;","import {Table} from \"antd\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {College} from \"../../entity/College\";\r\nimport instance from \"../../axiosInstance\";\r\n\r\nconst CollegeManagerPage = () => {\r\n    const [data, setData] = useState<College[]>([])\r\n\r\n    useEffect(() => {\r\n        instance.get<College[]>(\"/admin/getAllCollege\")\r\n            .then((resp) => setData(resp.data))\r\n    }, [])\r\n\r\n    const columns = [\r\n        {title: '学院名', dataIndex: 'name', key: 'name'},\r\n        {\r\n            title: '', dataIndex: 'id', key: 'id',\r\n            render: (id: number) => <Link to={`/admin/college/${id}`}>查看所有专业</Link>\r\n        },\r\n        {\r\n            title: '', dataIndex: 'id', key: 'id',\r\n            render: (id: number) => <Link to={`/admin/student/${id}`}>查看该学院所有学生信息</Link>\r\n        },\r\n        {\r\n            title: '', dataIndex: 'id', key: 'id',\r\n            render: (id: number) => <Link to={`/admin/student/${id}`}>查看该学院所有教师信息</Link>\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Table columns={columns} dataSource={data}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CollegeManagerPage","import React, {useEffect, useState} from \"react\";\r\nimport {Table} from \"antd\";\r\nimport {Clazz} from \"../../entity/Clazz\";\r\nimport instance from \"../../axiosInstance\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\n\r\nconst ClassManagerPage = () => {\r\n    const [data, setData] = useState<Clazz[]>([])\r\n    const {collegeId, majorId} = useParams<{ collegeId: string, majorId: string }>()\r\n\r\n    useEffect(() => {\r\n        instance.get<Clazz[]>(\"/admin/getAllClazzByMajor\", {params: {majorId: majorId}})\r\n            .then(response => setData(response.data))\r\n    }, [majorId])\r\n    const columns = [\r\n        {title: '班级名', dataIndex: 'name', key: 'name'},\r\n        {\r\n            title: '', dataIndex: 'id', key: 'id',\r\n            render: (id: number) => <Link to={`/admin/student/${collegeId}/${majorId}/${id}`}>查看该班级所有学生信息</Link>\r\n        }\r\n    ]\r\n\r\n    return <div>\r\n        <Table columns={columns} dataSource={data}/>\r\n    </div>\r\n}\r\n\r\nexport default ClassManagerPage","import React, {useEffect, useState} from \"react\";\r\nimport {Table} from \"antd\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {Major} from \"../../entity/Major\";\r\nimport instance from \"../../axiosInstance\";\r\n\r\nconst MajorManagerPage = () => {\r\n    const [data, setData] = useState<Major[]>([])\r\n    const {collegeId} = useParams<{ collegeId: string }>();\r\n\r\n    useEffect(() => {\r\n        instance.get<Major[]>(\"/admin/getMajorByCollegeId\", {params: {collegeId: collegeId}})\r\n            .then(response => setData(response.data))\r\n    }, [collegeId])\r\n\r\n    const columns = [\r\n        {title: '专业名', dataIndex: 'name', key: 'name'},\r\n        {\r\n            title: '', dataIndex: 'id', key: 'id',\r\n            render: (id: number) => <Link to={`/admin/college/${collegeId}/major/${id}`}>查看所有班级</Link>\r\n        },\r\n        {\r\n            title: '', dataIndex: 'id', key: 'id',\r\n            render: (id: number) => <Link to={`/admin/student/${collegeId}/${id}`}>查看该专业所有学生信息</Link>\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Table columns={columns} dataSource={data}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MajorManagerPage;\r\n\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../store\";\r\nimport {Redirect, Route, Switch, useHistory} from \"react-router\";\r\nimport {Layout, Menu} from 'antd';\r\nimport React from \"react\";\r\nimport StudentManagerPage from \"./StudentManagetPage\";\r\nimport TeacherManagerPage from \"./TeacherManagerPage\";\r\nimport CollegeManagerPage from \"./CollegeManagerPage\";\r\nimport {TeamOutlined, UserOutlined, GoldOutlined, LogoutOutlined} from '@ant-design/icons'\r\nimport ClassManagerPage from \"./ClassManagerPage\";\r\nimport MajorManagerPage from \"./MajorManagerPage\";\r\nimport instance from \"../../axiosInstance\";\r\nimport {setUser} from \"../../reducer/login/actionCreate\";\r\n\r\nconst {Content, Sider} = Layout;\r\n\r\nconst AdminPage = () => {\r\n    const loginUser = useSelector((state: RootState) => state.login)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    if (loginUser == null || !loginUser.login) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    if (loginUser.type === \"teacher\") {\r\n        return <Redirect to={\"/teacher\"}/>\r\n    }\r\n\r\n    if (loginUser.type === \"student\") {\r\n        return <Redirect to={\"/student\"}/>\r\n    }\r\n\r\n    const logout = async () => {\r\n        await instance.post(\"/logout\")\r\n        dispatch(setUser(null))\r\n    }\r\n\r\n    return (<div>\r\n        <Layout style={{minHeight: '100vh'}}>\r\n            <Sider collapsible className=\"site-layout-background\">\r\n                <div className=\"logo\"/>\r\n                <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                    <Menu.Item key=\"1\"\r\n                               icon={<TeamOutlined/>}\r\n                               onClick={() => history.push(\"/admin/student\")}>\r\n                        学生管理\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"2\"\r\n                               icon={<UserOutlined/>}\r\n                               onClick={() => history.push(\"/admin/teacher\")}>\r\n                        教师管理\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"3\"\r\n                               icon={<GoldOutlined/>}\r\n                               onClick={() => history.push(\"/admin/college\")}>\r\n                        学院管理\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"4\"\r\n                               icon={<LogoutOutlined/>}\r\n                               onClick={logout}>\r\n                        登出\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Sider>\r\n            <Layout className=\"site-layout\">\r\n                <Content>\r\n                    <div className=\"site-layout-background\" style={{padding: 24, minHeight: 360}}>\r\n                        <Switch>\r\n                            <Route path={\"/admin/student\"} exact component={StudentManagerPage}/>\r\n                            <Route path={\"/admin/student/:collegeId\"} exact component={StudentManagerPage}/>\r\n                            <Route path={\"/admin/student/:collegeId/:majorId\"} exact component={StudentManagerPage}/>\r\n                            <Route path={\"/admin/student/:collegeId/:majorId/:classId\"} exact\r\n                                   component={StudentManagerPage}/>\r\n                            <Route path={\"/admin/teacher\"} exact component={TeacherManagerPage}/>\r\n                            <Route path={\"/admin/teacher/:collegeId\"} exact component={TeacherManagerPage}/>\r\n                            <Route path={\"/admin/college\"} exact component={CollegeManagerPage}/>\r\n                            <Route path={\"/admin/college/:collegeId\"} exact component={MajorManagerPage}/>\r\n                            <Route path={\"/admin/college/:collegeId/major/:majorId\"} exact\r\n                                   component={ClassManagerPage}/>\r\n                        </Switch>\r\n                    </div>\r\n                </Content>\r\n            </Layout>\r\n        </Layout>\r\n    </div>)\r\n\r\n}\r\n\r\nexport default AdminPage;","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store\";\r\nimport {Button} from \"antd\";\r\nimport instance from \"../axiosInstance\";\r\nimport {setUser} from \"../reducer/login/actionCreate\";\r\n\r\nconst Header = () => {\r\n    const loginUser = useSelector((root: RootState) => root.login)\r\n    const dispatch = useDispatch()\r\n    if (loginUser == null || !loginUser.login) {\r\n        return <></>\r\n    }\r\n    const logout = async () => {\r\n        await instance.post(\"/logout\")\r\n        dispatch(setUser(null))\r\n    }\r\n\r\n    return <>\r\n        <Button onClick={logout} type={\"primary\"}>登出</Button>\r\n        <span>{loginUser.name}</span>\r\n    </>\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport {Button, Checkbox, Col, Form, Radio, Row} from \"antd\";\r\n\r\ninterface FormProps {\r\n    onFinish: (haveBeenToKeyEpidemicAreas: boolean,\r\n               haveBeenAbroad: boolean,\r\n               isTheExposed: boolean,\r\n               isSuspectedCase: boolean,\r\n               currentSymptoms: Array<string>) => void\r\n}\r\n\r\nconst SubmitDailyCardForm: React.FC<FormProps> = ({onFinish}) => {\r\n\r\n    const finish = (values: any) => {\r\n        const haveBeenToKeyEpidemicAreas = values.haveBeenToKeyEpidemicAreas != null\r\n        const haveBeenAbroad = values.haveBeenAbroad != null\r\n        const isTheExposed = values.isTheExposed != null\r\n        const isSuspectedCase = values.isSuspectedCase != null\r\n        const currentSymptoms = values.currentSymptoms\r\n        onFinish(haveBeenToKeyEpidemicAreas, haveBeenAbroad, isTheExposed, isSuspectedCase, currentSymptoms)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onFinish={finish}>\r\n                <Form.Item name=\"haveBeenToKeyEpidemicAreas\">\r\n                    <Checkbox.Group>\r\n                        <Checkbox value=\"true\">\r\n                            近期（14天内）去过湖北省或重点疫区\r\n                        </Checkbox>\r\n                    </Checkbox.Group>\r\n                </Form.Item>\r\n                <Form.Item name=\"haveBeenAbroad\">\r\n                    <Checkbox.Group>\r\n                        <Checkbox value=\"true\">\r\n                            近期（14天内）去过国外\r\n                        </Checkbox>\r\n                    </Checkbox.Group>\r\n                </Form.Item>\r\n                <Form.Item name=\"isTheExposed\">\r\n                    <Checkbox.Group>\r\n                        <Checkbox value=\"true\">\r\n                            近期（14天内）接触过新冠确诊病人或疑似病人\r\n                        </Checkbox>\r\n                    </Checkbox.Group>\r\n                </Form.Item>\r\n                <Form.Item name=\"isSuspectedCase\">\r\n                    <Checkbox.Group>\r\n                        <Checkbox value=\"true\">\r\n                            被卫生部门确认为新冠肺炎确诊病例或疑似病例\r\n                        </Checkbox>\r\n                    </Checkbox.Group>\r\n                </Form.Item>\r\n                <Form.Item name=\"currentSymptoms\">\r\n                    <Checkbox.Group>\r\n                        <Row>\r\n                            <Col span={8}><Checkbox value=\"发烧\">发烧（≥37.3℃）</Checkbox></Col>\r\n                            <Col span={8}><Checkbox value=\"乏力\">乏力</Checkbox></Col>\r\n                            <Col span={8}><Checkbox value=\"干咳\">干咳</Checkbox></Col>\r\n                            <Col span={8}><Checkbox value=\"鼻塞\">鼻塞</Checkbox></Col>\r\n                            <Col span={8}><Checkbox value=\"流涕\">流涕</Checkbox></Col>\r\n                            <Col span={8}><Checkbox value=\"咽痛\">咽痛</Checkbox></Col>\r\n                            <Col span={8}><Checkbox value=\"腹泻\">腹泻</Checkbox></Col>\r\n                        </Row>\r\n                    </Checkbox.Group>\r\n                </Form.Item>\r\n                <Form.Item rules={[{required: true, message: '未勾选此项'}]}>\r\n                    <Radio.Group>\r\n                        <Radio>本人郑重承诺：填报信息真实，愿意承担相应的法律责任。</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        提交\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubmitDailyCardForm;","import React, {useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../store\";\r\nimport {Redirect} from \"react-router\";\r\nimport instance from \"../../axiosInstance\";\r\nimport Header from \"../../component/Header\";\r\nimport SubmitDailyCardForm from \"../../component/SubmitDailyCardForm\";\r\nimport {Skeleton} from \"antd\";\r\n\r\nconst StudentPage = () => {\r\n    const loginUser = useSelector((state: RootState) => state.login)\r\n\r\n    const [isSubmitDailyCard, setSubmitDailyCard] = useState<Boolean>(false)\r\n    const [isLoading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        instance\r\n            .get<Boolean>(\"/student/cardStatus\")\r\n            .then(response => setSubmitDailyCard(response.data))\r\n            .finally(() => setLoading(false))\r\n    }, [loginUser])\r\n\r\n    if (loginUser == null || !loginUser.login) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    if (loginUser.type === \"teacher\") {\r\n        return <Redirect to={\"/teacher\"}/>\r\n    }\r\n\r\n    if (loginUser.type !== \"student\") {\r\n        return <Redirect to={\"/admin\"}/>\r\n    }\r\n\r\n    const onFinish = async (haveBeenToKeyEpidemicAreas: boolean,\r\n                            haveBeenAbroad: boolean,\r\n                            isTheExposed: boolean,\r\n                            isSuspectedCase: boolean,\r\n                            currentSymptoms: Array<string>) => {\r\n\r\n        instance.post(\"/student/submit\", {\r\n            haveBeenToKeyEpidemicAreas,\r\n            haveBeenAbroad,\r\n            isTheExposed,\r\n            isSuspectedCase,\r\n            currentSymptoms\r\n        }).then(() => setSubmitDailyCard(true))\r\n    }\r\n    return <div style={{marginLeft: '30%', marginRight: \"30%\", marginTop: 30}}>\r\n        <Header/>\r\n        {isLoading && <Skeleton active={true}/>}\r\n        {!isLoading && isSubmitDailyCard && <img src={\"/student/qrcode\"} alt={\"健康码\"}/>}\r\n        {!isLoading && !isSubmitDailyCard && <SubmitDailyCardForm onFinish={onFinish}/>}\r\n    </div>\r\n}\r\n\r\nexport default StudentPage;","import React, {useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../store\";\r\nimport {Redirect} from \"react-router\";\r\nimport Header from \"../../component/Header\";\r\nimport instance from \"../../axiosInstance\";\r\nimport SubmitDailyCardForm from \"../../component/SubmitDailyCardForm\";\r\nimport {Skeleton} from \"antd\";\r\n\r\n\r\nconst TeacherPage = () => {\r\n    const [isSubmitDailyCard, setSubmitDailyCard] = useState<Boolean>(false)\r\n    const loginUser = useSelector((state: RootState) => state.login)\r\n    const [isLoading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        instance\r\n            .get<Boolean>(\"/teacher/cardStatus\")\r\n            .then(response => setSubmitDailyCard(response.data))\r\n            .finally(() => setLoading(false))\r\n    }, [])\r\n\r\n\r\n    if (loginUser == null || !loginUser.login) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n    if (loginUser.type === \"student\") {\r\n        return <Redirect to={\"/student\"}/>\r\n    }\r\n    if (loginUser.type !== \"teacher\") {\r\n        return <Redirect to={\"/admin\"}/>\r\n    }\r\n\r\n    const onFinish = async (haveBeenToKeyEpidemicAreas: boolean,\r\n                            haveBeenAbroad: boolean,\r\n                            isTheExposed: boolean,\r\n                            isSuspectedCase: boolean,\r\n                            currentSymptoms: Array<string>) => {\r\n\r\n        instance.post(\"/student/submit\", {\r\n            haveBeenToKeyEpidemicAreas,\r\n            haveBeenAbroad,\r\n            isTheExposed,\r\n            isSuspectedCase,\r\n            currentSymptoms\r\n        }).then(() => setSubmitDailyCard(true))\r\n    }\r\n\r\n    return <div style={{marginLeft: '30%', marginRight: \"30%\", marginTop: 30}}>\r\n        <Header/>\r\n        {isLoading && <Skeleton active={true}/>}\r\n        {!isLoading && isSubmitDailyCard && <img src={\"/student/qrcode\"} alt={\"健康码\"}/>}\r\n        {!isLoading && !isSubmitDailyCard && <SubmitDailyCardForm onFinish={onFinish}/>}\r\n    </div>\r\n}\r\n\r\nexport default TeacherPage","import React from 'react';\nimport LoginPage from \"./page/login/LoginPage\";\nimport {Route, Switch} from \"react-router\";\nimport AdminPage from \"./page/admin/AdminPage\";\nimport StudentPage from \"./page/student/StudentPage\";\nimport TeacherPage from \"./page/teacher/TeacherPage\";\n\nfunction App() {\n    return <>\n        <Switch>\n            <Route path=\"/\" exact component={LoginPage}/>\n            <Route path=\"/teacher\" component={TeacherPage}/>\n            <Route path=\"/admin\" component={AdminPage}/>\n            <Route path=\"/student\" component={StudentPage}/>\n        </Switch>\n    </>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport loginReducer from './reducer/login/loginReducer'\r\nimport thunk from 'redux-thunk'\r\n\r\n\r\nconst reducer = combineReducers({\r\n    login: loginReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof reducer>\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport default store","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from 'react-router-dom';\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.register();\n\n"],"sourceRoot":""}